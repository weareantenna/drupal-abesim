<?php
/**
 * Helper function that performs after site install tasks. This function should
 * only be run once from drush!
 *
 * Usage example: (from the command line)
 *    drush si o2 -y
 *    drush cc all
 *    drush sia -y --domain=abesim --tld=com
 *    drush upwd --password="" admin
 */
function _o2_base_install_after($domain, $tld, $mail, $name) {
  variable_set('site_name', $name);
  variable_set('site_mail', $mail);
  variable_set('webform_default_from_name', $name);
  variable_set('webform_default_from_address', $mail);
  $role = user_role_load_by_name('Administrator');
  variable_set('user_admin_role', $role->rid);

  // Aliases can be wrong when importing content through uuid features export.
  _o2_base_regenerate_aliases();

  // Feature lock prevents a feature from being reverted, ever! Best used to
  // provide default content/settings that customer can change afterwards.
  // (for content and softconfig)
  $features_to_lock = array(
    'fo2_content',
  );
  foreach ($features_to_lock as $name) {
    features_feature_lock($name);
    $feature = features_get_features($name);
    if (is_object($feature)) {
      foreach ($feature->components as $component) {
        features_feature_lock($name, $component);
      }
    }
  }

  // Setup multilingual variables.
  $variables = array(
    'site_name',
    'site_slogan',
    'site_frontpage',
    'site_403',
    'site_404',
    'user_mail_register_admin_created_subject',
    'user_mail_register_admin_created_body',
    'user_mail_register_pending_approval_subject',
    'user_mail_register_pending_approval_body',
    'user_mail_register_no_approval_required_subject',
    'user_mail_register_no_approval_required_body',
    'user_mail_password_reset_subject',
    'user_mail_password_reset_body',
    'user_mail_status_activated_subject',
    'user_mail_status_activated_body',
    'user_mail_status_blocked_subject',
    'user_mail_status_blocked_body',
    'user_mail_cancel_confirm_subject',
    'user_mail_cancel_confirm_body',
    'user_mail_status_canceled_subject',
    'user_mail_status_canceled_body',
  );
  variable_set('variable_realm_list_language', $variables);

  // Set default nodes in Drupal for home, 403, 404.
  $languages = language_list('enabled');
  $enabled_languages = $languages[1];
  $uuids = array(
    'site_frontpage' => array(
      'en' => '73eaa7b6-7050-4238-a81c-b41295c6a665',
      'nl' => '6a09246b-ced7-410d-b4c9-79765cbca82b',
      'fr' => '713b177c-e9ce-4757-aaa2-d8a57206e552',
      'de' => 'a43fa887-2e70-446f-a9a7-6ced9daa4294',
      'pl' => 'f2caa064-2969-4399-8757-0189f688d294',
      'es' => '310c20cf-c393-4349-a8e8-2d127c528ca0',
    ),
    'site_403' => array(
      'en' => 'e557c6ab-9c9f-471d-b58f-85df096af3a1',
      'nl' => '0a657d45-7ddd-49d9-800e-5100a76a510f',
      'fr' => '3fcbe99c-f439-4eb2-9a32-90ab6a8d7ad4',
      'de' => '5a9c5c12-a4e5-4578-9e26-e89af9abea69',
    ),
    'site_404' => array(
      'en' => '254db7e5-86d3-4f8f-9a0b-6aea0cc24941',
      'nl' => '43f5d8b3-e780-4521-9756-cd90b20fd06d',
      'fr' => '91e03bc2-0f53-4771-bbb6-60d25c2ed2c2',
      'de' => '93a722ed-8398-4c23-b7ef-8dd1f4d50888',
    ),
  );
  foreach ($uuids as $name => $uuid) {
    foreach ($enabled_languages as $lang => $language) {
      if (isset($uuid[$lang])) {
        $entities = entity_uuid_load('node', array($uuid[$lang]));
        $node = array_pop($entities);
        if (!empty($node) && is_object($node) && isset($node->nid)) {
          i18n_variable_set($name, 'node/' . $node->nid, $lang);
        }
      }
    }
  }

  // Force all nodes to user 1.
  db_update('node')->fields(array('uid' => 1))->execute();
  db_update('node_revision')->fields(array('uid' => 1))->execute();

  // When using node access modules.
  _o2_base_build_node_access();
}

/**
 * Regenerate all node aliasses.
 */
function _o2_base_regenerate_aliases() {
  module_load_include('inc', 'pathauto');
  module_load_include('inc', 'pathauto.pathauto');
  db_delete('url_alias')
    ->condition('source', 'node/%', 'LIKE')
    ->execute();
  $nids = db_query('SELECT nid FROM {node}')->fetchCol();
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $node) {
    $uri = entity_uri('node', $node);
    $node->path['pathauto'] = 1;
    pathauto_create_alias('node', 'insert', $uri['path'], array('node' => $node), $node->type, pathauto_entity_language('node', $node));
  }
}


/**
 * Helper function to install and configure defaults for languages.
 */
function _o2_install_languages($languages) {
  require_once DRUPAL_ROOT . '/includes/language.inc';

  // Enable and prefixes all required languages.
  foreach ($languages as $lang) {
    if ($lang) {
      if ($lang != 'en') {
        locale_add_language($lang);
      }
      db_update('languages')
        ->fields(array('prefix' => $lang))
        ->condition('language', $lang)
        ->execute();
    }
  }

  // Enable language detection via url by default.
  $negotiation['locale-url'] = array(
    'types' => array(
      'language_content',
      'language',
      'language_url',
    ),
    'callbacks' => array(
      'language' => 'locale_language_from_url',
      'switcher' => 'locale_language_switcher_url',
      'url_rewrite' => 'locale_language_url_rewrite_url',
    ),
    'file' => 'includes/locale.inc',
    'weight' => '-8,',
    'name' => 'URL',
    'description' => t('Determine the language from the URL (Path prefix or domain).'),
    'config' => 'admin/config/regional/language/configure/url',
  );
  language_negotiation_set('language', $negotiation);

  // Force toolbar to stay in the desired admin language.
  variable_set('admin_language_translate_toolbar', 1);

  // The first language given is the default language.
  $language = i18n_language_load($languages[0]);
  variable_set('language_default', $language);

  // If English was not provided, we disable it because English was enabled by
  // default on site installation.
  if (!in_array('en', $languages)) {
    db_update('languages')
      ->fields(array('enabled' => 0))
      ->condition('language', 'en')
      ->execute();
  }
}

/**
 * Implements hook_block_info().
 *
 * Provide custom breadcrumb block for easier placement with contexts.
 */
function o2_base_block_info() {
  $blocks['o2_breadcrumb'] = array(
    'info' => 'O2 Agency: ' . t('Breadcrumb'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function o2_base_block_view($delta = '') {
  switch ($delta) {
    case 'o2_breadcrumb':
      $block['subject'] = '';
      $block['content'] = o2_base_block_content_breadcrumb();
      break;
  }
  return $block;
}

function o2_base_block_content_breadcrumb() {
  $markup = '';
  $breadcrumb = drupal_get_breadcrumb();
  $breadcrumb[] = drupal_get_title();
  if (is_array($breadcrumb)) {
    //$markup = theme_breadcrumb(array('breadcrumb' => $breadcrumb));
    $markup = '<ul class="breadcrumbs">';
    foreach($breadcrumb as $value) {
      $markup .= '<li>'.$value.'</li>';
    }
    $markup .= '</ul>';
  }
  if (!empty($markup)) {
    return array('#markup' => $markup);
  }
  return NULL;
}

/**
 * Implements hook_menu().
 */
function o2_base_menu() {
  $items['user/edit'] = array(
    'page callback' => 'o2_base_user_edit',
    'access callback' => 'user_is_logged_in',
  );
  return $items;
}

/**
 * Redirect users from the generic user/edit path to their user edit path.
 */
function o2_base_user_edit() {
  global $user;
  drupal_goto('user/' . $user->uid . '/edit');
}

/**
 * Helper function to setup node access for certain pages.
 * This implementation uses content_access module, you should change/adapt it to
 * whatever access module and settings you want to use. This implementation is
 * merely here as an example.
 */
function _o2_base_build_node_access() {
  /*
  // Settings to disallow anonymous access to a node.
  $settings = array(
    'view' => array(
      0 => 2,
      1 => 3,
      2 => 4,
    ),
    'view_own' => array(
      0 => 2,
      1 => 3,
      2 => 4,
    ),
    'update' => array(
      0 => 3,
      1 => 4,
    ),
    'update_own' => array(
      0 => 3,
      1 => 4,
    ),
    'delete' => array(
      0 => 3,
      1 => 4,
    ),
    'delete_own' => array(
      0 => 3,
      1 => 4,
    ),
  );

  $uuids = array(
    '',
  );
  $nodes = entity_uuid_load('node', $uuids);
  foreach ($nodes as $node) {
    content_access_save_per_node_settings($node, $settings);
  }
  */

  node_access_rebuild();
}

/**
 * Implements hook_language_switch_links_alter().
 *
 * Rewrite the language switcher to show the links as language shortcodes instead
 * of fully translated language names.
 */
function o2_base_language_switch_links_alter(array &$links, $type, $path) {
  if (!empty($links)) {
    foreach ($links as $lang => $link) {
      $links[$lang]['title'] = $lang;
    }
  }
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 *
 * Rewrite the language switcher block to never show a subject.
 */
function o2_base_block_view_locale_language_alter(&$data, $block) {
  $data['subject'] = NULL;
}
